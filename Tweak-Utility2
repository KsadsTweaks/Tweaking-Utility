Add-Type -AssemblyName System.Windows.Forms
Add-Type -AssemblyName System.Drawing

# Function to Apply Registry Tweaks with improved error handling
function Apply-Tweak {
    param (
        [string]$Path,
        [string]$Name,
        [string]$Type,
        [string]$Value
    )
    try {
        $fullpath = Join-Path $Path $Name
        if (-not (Test-Path -Path $Path -PathType Container)) { #Check if the path is a valid registry key
            New-Item -Path $Path -ItemType Directory -Force | Out-Null
        }
        Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type $Type -ErrorAction Stop
        Write-Host "Applied: $($fullpath) = $Value" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Host "Failed to apply $($fullpath): $($_.Exception.Message)" -ForegroundColor Red
        return $false
    }
}

# List of Tweaks
$tweaks = @(
    # ... (Your tweak list remains unchanged) ...
)

# Create the Form with improved layout
$form = New-Object System.Windows.Forms.Form
$form.Text = "Windows Tweaks"
$form.Size = New-Object System.Drawing.Size(600, 500)
$form.StartPosition = 'CenterScreen'
$form.BackColor = [System.Drawing.Color]::FromArgb(35, 35, 35)

$label = New-Object System.Windows.Forms.Label
$label.Text = "Select Tweaks to Apply:"
$label.ForeColor = [System.Drawing.Color]::White
$label.Dock = 'Top' #Dock to top for better layout
$label.AutoSize = $true
$form.Controls.Add($label)

$flowLayoutPanel = New-Object System.Windows.Forms.FlowLayoutPanel
$flowLayoutPanel.Dock = 'Fill'
$flowLayoutPanel.AutoSize = $true
$flowLayoutPanel.FlowDirection = 'TopDown'
$flowLayoutPanel.WrapContents = $true
$form.Controls.Add($flowLayoutPanel)

#Group and display tweaks with improved layout
$tweaks | Group-Object Category | ForEach-Object {
    $categoryLabel = New-Object System.Windows.Forms.Label
    $categoryLabel.Text = $_.Name
    $categoryLabel.ForeColor = [System.Drawing.Color]::FromArgb(66, 135, 245)
    $categoryLabel.Font = New-Object System.Drawing.Font("Segoe UI", 10, [System.Drawing.FontStyle]::Bold)
    $flowLayoutPanel.Controls.Add($categoryLabel)


    foreach ($tweak in $_.Group) {
        $checkbox = New-Object System.Windows.Forms.CheckBox
        $checkbox.Text = $tweak.Description
        $checkbox.ToolTipText = $tweak.Explanation
        $checkbox.ForeColor = [System.Drawing.Color]::White
        $checkbox.BackColor = $form.BackColor
        $checkbox.AutoSize = $true
        $checkbox.Tag = $tweak
        $flowLayoutPanel.Controls.Add($checkbox)
    }
}

# Apply Button with improved placement
$applyButton = New-Object System.Windows.Forms.Button
$applyButton.Text = "Apply Selected Tweaks"
$applyButton.ForeColor = [System.Drawing.Color]::White
$applyButton.BackColor = [System.Drawing.Color]::FromArgb(66, 135, 245)
$applyButton.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
$applyButton.Dock = 'Bottom'
$applyButton.AutoSize = $true
$form.Controls.Add($applyButton)


$applyButton.Add_Click({
    $successCount = 0
    $failureCount = 0
    foreach ($checkbox in $flowLayoutPanel.Controls | Where-Object {$_.GetType().Name -eq "CheckBox"}) {
        if ($checkbox.Checked) {
            if (Apply-Tweak -Path $checkbox.Tag.Path -Name $checkbox.Tag.Name -Type $checkbox.Tag.Type -Value $checkbox.Tag.Value) {
                $successCount++
            } else {
                $failureCount++
            }
        }
    }
    $message = "Tweaks applied. Success: $successCount, Failures: $failureCount"
    [System.Windows.Forms.MessageBox]::Show($message, "Results", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
})

$form.ShowDialog()
