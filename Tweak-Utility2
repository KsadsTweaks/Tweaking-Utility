Add-Type -AssemblyName System.Windows.Forms

# Function to Apply Registry Tweaks with improved error handling and logging
function Apply-Tweak {
    param (
        [string]$Path,
        [string]$Name,
        [string]$Type,
        [string]$Value,
        [string]$Description
    )
    try {
        $fullpath = Join-Path $Path $Name
        if (-not (Test-Path -Path $Path -PathType Container)) {
            Write-Warning "Registry key '$Path' does not exist. Creating..."
            New-Item -Path $Path -ItemType Directory -Force | Out-Null
        }
        Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type $Type -ErrorAction Stop
        Write-Host "Applied: $($fullpath) = $Value  ($Description)" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Error "Failed to apply $($fullpath): $($_.Exception.Message)"
        return $false
    }
}

# List of Tweaks - Improved Structure for Readability
$tweaks = @(
    @{ Category = "Privacy"; Description = "Disable Telemetry"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"; Name = "AllowTelemetry"; Type = "DWORD"; Value = 0; },
    @{ Category = "Privacy"; Description = "Disable Diagnostic Tracking Services"; Path = "HKLM:\SYSTEM\CurrentControlSet\Services\DiagTrack"; Name = "Start"; Type = "DWORD"; Value = 4; },
    @{ Category = "Privacy"; Description = "Disable Advertising ID"; Path = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo"; Name = "Enabled"; Type = "DWORD"; Value = 0; },
    @{ Category = "Cortana"; Description = "Disable Cortana"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"; Name = "AllowCortana"; Type = "DWORD"; Value = 0; },
    @{ Category = "Cortana"; Description = "Disable Bing Search in Start Menu"; Path = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Search"; Name = "BingSearchEnabled"; Type = "DWORD"; Value = 0; },
    @{ Category = "System"; Description = "Disable Feedback Requests"; Path = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection"; Name = "DoNotShowFeedbackNotifications"; Type = "DWORD"; Value = 1; },
    @{ Category = "System"; Description = "Disable Windows Update (Use with caution!)"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate"; Name = "DisableOSUpgrade"; Type = "DWORD"; Value = 1; },
    @{ Category = "UI"; Description = "Remove Lock Screen"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization"; Name = "NoLockScreen"; Type = "DWORD"; Value = 1; },
    @{ Category = "UI"; Description = "Disable Transparency Effects"; Path = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize"; Name = "EnableTransparency"; Type = "DWORD"; Value = 0; },
    @{ Category = "Edge"; Description = "Disable Edge Preloading"; Path = "HKCU:\SOFTWARE\Microsoft\Edge\Main"; Name = "PreloadHttpsURL"; Type = "DWORD"; Value = 0; }
)


# Create the Form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Windows Tweaks"
$form.Size = New-Object System.Drawing.Size(500, 400)
$form.StartPosition = 'CenterScreen'
$form.FormBorderStyle = 'FixedDialog' # Prevent resizing
$form.MaximizeBox = $false
$form.MinimizeBox = $false

$panel = New-Object System.Windows.Forms.Panel
$panel.Dock = 'Fill'
$panel.AutoScroll = $true # Allow scrolling if needed
$form.Controls.Add($panel)

# Add Tweaks to the Form
$yPosition = 10
foreach ($tweak in $tweaks) {
    $checkbox = New-Object System.Windows.Forms.CheckBox
    $checkbox.Text = "$($tweak.Category): $($tweak.Description)"
    $checkbox.AutoSize = $true
    $checkbox.Location = New-Object System.Drawing.Point(10, $yPosition)
    $checkbox.Tag = $tweak
    $panel.Controls.Add($checkbox)
    $yPosition += $checkbox.Height + 5
}

# Apply Button
$applyButton = New-Object System.Windows.Forms.Button
$applyButton.Text = "Apply Selected Tweaks"
$applyButton.Location = New-Object System.Drawing.Point(10, $yPosition + 10)
$applyButton.Width = 480 # Set a fixed width
$applyButton.Height = 30 # Set a fixed height
$applyButton.Anchor = 'Bottom, Left' # Anchor to bottom-left
$applyButton.DialogResult = 'OK' # Close form on click
$form.Controls.Add($applyButton)

$applyButton.Add_Click({
    $results = @()
    foreach ($control in $panel.Controls | Where-Object {$_.GetType().Name -eq "CheckBox"}) {
        if ($control.Checked) {
            $result = Apply-Tweak @($control.Tag)
            $results += [PSCustomObject]@{
                Description = $control.Tag.Description
                Success = $result
            }
        }
    }
    $successCount = ($results | Where-Object {$_.Success}).Count
    $failureCount = ($results | Where-Object {-not $_.Success}).Count

    $message = "Tweaks applied. Success: $successCount, Failures: $failureCount"
    if ($failureCount -gt 0) {
        $failureDetails = ($results | Where-Object {-not $_.Success} | ForEach-Object {$_.Description}) -join "`n"
        $message += "`nFailures Details: $failureDetails"
    }
    [System.Windows.Forms.MessageBox]::Show($message, "Results", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)
    $form.Close()
})

$form.ShowDialog()
