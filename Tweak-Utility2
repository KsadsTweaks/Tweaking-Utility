Add-Type -AssemblyName System.Windows.Forms

# Function to apply registry tweaks
function Apply-Tweak {
    param(
        [string]$Path,
        [string]$Name,
        [string]$Type,
        [string]$Value,
        [string]$Description
    )
    try {
        $fullPath = Join-Path $Path $Name
        if (-not (Test-Path -Path $Path -PathType Container)) {
            Write-Warning "Registry key '$Path' does not exist. Creating..."
            New-Item -Path $Path -ItemType Directory -Force | Out-Null
        }

        # Convert Type to RegistryValueKind
        $valueKind = [Microsoft.Win32.RegistryValueKind]::$Type
        Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type $valueKind -ErrorAction Stop
        Write-Host "Applied: $($fullPath) = $Value  ($Description)" -ForegroundColor Green
        return $true
    }
    catch {
        Write-Error "Failed to apply $($fullPath): $($_.Exception.Message)"
        return $false
    }
}

# Tweaks List
$tweaks = @(
    @{ Category = "Privacy"; Description = "Disable Telemetry"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\DataCollection"; Name = "AllowTelemetry"; Type = "DWord"; Value = 0; },
    @{ Category = "Privacy"; Description = "Disable Diagnostic Tracking Services"; Path = "HKLM:\SYSTEM\CurrentControlSet\Services\DiagTrack"; Name = "Start"; Type = "DWord"; Value = 4; },
    @{ Category = "Privacy"; Description = "Disable Advertising ID"; Path = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\AdvertisingInfo"; Name = "Enabled"; Type = "DWord"; Value = 0; },
    @{ Category = "Cortana"; Description = "Disable Cortana"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Windows Search"; Name = "AllowCortana"; Type = "DWord"; Value = 0; },
    @{ Category = "Cortana"; Description = "Disable Bing Search in Start Menu"; Path = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Search"; Name = "BingSearchEnabled"; Type = "DWord"; Value = 0; },
    @{ Category = "System"; Description = "Disable Feedback Requests"; Path = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\DataCollection"; Name = "DoNotShowFeedbackNotifications"; Type = "DWord"; Value = 1; },
    @{ Category = "UI"; Description = "Remove Lock Screen"; Path = "HKLM:\SOFTWARE\Policies\Microsoft\Windows\Personalization"; Name = "NoLockScreen"; Type = "DWord"; Value = 1; },
    @{ Category = "UI"; Description = "Disable Transparency Effects"; Path = "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Themes\Personalize"; Name = "EnableTransparency"; Type = "DWord"; Value = 0; },
    @{ Category = "Edge"; Description = "Disable Edge Preloading"; Path = "HKCU:\SOFTWARE\Microsoft\Edge\Main"; Name = "PreloadHttpsURL"; Type = "DWord"; Value = 0; },
    @{ Category = "Performance"; Description = "Disable Unnecessary Visual Effects"; Path = "HKCU:\Control Panel\Desktop"; Name = "VisualFXSetting"; Type = "String"; Value = "2"; },
    @{ Category = "Network"; Description = "Disable Network Discovery"; Path = "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System"; Name = "EnableNetworkDiscovery"; Type = "DWord"; Value = 0; }
)

# Create the Form
$form = New-Object System.Windows.Forms.Form
$form.Text = "Windows Tweaks"
$form.Size = New-Object System.Drawing.Size(500, 500)
$form.StartPosition = 'CenterScreen'
$form.FormBorderStyle = 'FixedDialog'
$form.MaximizeBox = $false
$form.MinimizeBox = $false

$panel = New-Object System.Windows.Forms.Panel
$panel.Dock = 'Fill'
$panel.AutoScroll = $true
$form.Controls.Add($panel)

# Add Tweaks to the Form
$flowLayoutPanel = New-Object System.Windows.Forms.FlowLayoutPanel
$flowLayoutPanel.Dock = 'Fill'
$flowLayoutPanel.AutoScroll = $true
$flowLayoutPanel.FlowDirection = 'TopDown'
$flowLayoutPanel.WrapContents = $true
$panel.Controls.Add($flowLayoutPanel)

foreach ($tweak in $tweaks) {
    $checkbox = New-Object System.Windows.Forms.CheckBox
    $checkbox.Text = "$($tweak.Category): $($tweak.Description)"
    $checkbox.AutoSize = $true
    $checkbox.Tag = $tweak
    $flowLayoutPanel.Controls.Add($checkbox)
}

# Create a button to open the System Properties Protection page
$restorePageButton = New-Object System.Windows.Forms.Button
$restorePageButton.Text = "Open System Protection"
$restorePageButton.Dock = 'Top'
$restorePageButton.Height = 30
$form.Controls.Add($restorePageButton)

# Button click event to open System Protection page
$restorePageButton.Add_Click({
    Start-Process "SystemPropertiesProtection.exe"
})

# Apply Button
$applyButton = New-Object System.Windows.Forms.Button
$applyButton.Text = "Apply Selected Tweaks"
$applyButton.Dock = 'Bottom'
$applyButton.Height = 30
$form.Controls.Add($applyButton)

# Apply Button Click Event
$applyButton.Add_Click({
    $results = @()
    foreach ($control in $flowLayoutPanel.Controls | Where-Object {$_.GetType().Name -eq "CheckBox"}) {
        if ($control.Checked) {
            $tweak = $control.Tag
            $result = Apply-Tweak -Path $tweak.Path -Name $tweak.Name -Type $tweak.Type -Value $tweak.Value -Description $tweak.Description
            $results += [PSCustomObject]@{
                Description = $tweak.Description
                Success = $result
            }
        }
    }
    $successCount = ($results | Where-Object {$_.Success}).Count
    $failureCount = ($results | Where-Object {-not $_.Success}).Count

    $message = "Tweaks applied. Success: $successCount, Failures: $failureCount"
    if ($failureCount -gt 0) {
        $failureDetails = ($results | Where-Object {-not $_.Success} | ForEach-Object {$_.Description}) -join "`n"
        $message += "`nFailures Details: $failureDetails"
    }
    [System.Windows.Forms.MessageBox]::Show($message, "Results", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Information)

    # Don't close the form
})

$form.ShowDialog()
