# Load necessary .NET assemblies for GUI
Add-Type -AssemblyName "System.Windows.Forms"
Add-Type -AssemblyName "System.Drawing"

# Function to Apply Registry Tweaks
function Apply-Tweak {
    param (
        [string]$Path,
        [string]$Name,
        [string]$Type,
        [string]$Value
    )
    try {
        if (-not (Test-Path $Path)) {
            New-Item -Path $Path -Force | Out-Null
        }
        Set-ItemProperty -Path $Path -Name $Name -Value $Value -Type $Type
        Write-Host "Applied: $Path\$Name = $Value" -ForegroundColor Green
    } catch {
        Write-Host "Failed to apply: $Path\$Name" -ForegroundColor Red
    }
}

# List of Tweaks categorized
$tweaks = @(
    @{ Category = "Privacy Tweaks"; Description = "Disable Telemetry"; Path = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\DataCollection"; Name = "AllowTelemetry"; Type = "DWORD"; Value = 0; Explanation = "Disables sending diagnostic and usage data to Microsoft." },
    @{ Category = "Privacy Tweaks"; Description = "Disable Diagnostic Tracking Services"; Path = "HKLM:\\SYSTEM\\CurrentControlSet\\Services\\DiagTrack"; Name = "Start"; Type = "DWORD"; Value = 4; Explanation = "Disables the diagnostic tracking service (DiagTrack), which monitors system data." },
    @{ Category = "Privacy Tweaks"; Description = "Disable Advertising ID"; Path = "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\AdvertisingInfo"; Name = "Enabled"; Type = "DWORD"; Value = 0; Explanation = "Disables personalized ads in Windows based on your activity." },

    @{ Category = "Cortana & Search"; Description = "Disable Cortana"; Path = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Windows Search"; Name = "AllowCortana"; Type = "DWORD"; Value = 0; Explanation = "Completely disables Cortana, the digital assistant." },
    @{ Category = "Cortana & Search"; Description = "Disable Bing Search in Start Menu"; Path = "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Search"; Name = "BingSearchEnabled"; Type = "DWORD"; Value = 0; Explanation = "Disables Bing search integration in the Start menu." },

    @{ Category = "System Tweaks"; Description = "Disable Feedback Requests"; Path = "HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\DataCollection"; Name = "DoNotShowFeedbackNotifications"; Type = "DWORD"; Value = 1; Explanation = "Disables the 'Send Feedback' notifications from Windows." },
    @{ Category = "System Tweaks"; Description = "Disable Windows Defender"; Path = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows Defender"; Name = "DisableAntiSpyware"; Type = "DWORD"; Value = 1; Explanation = "Disables Windows Defender Antivirus." },
    @{ Category = "System Tweaks"; Description = "Disable Windows Update"; Path = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\WindowsUpdate"; Name = "DisableOSUpgrade"; Type = "DWORD"; Value = 1; Explanation = "Prevents Windows Update from upgrading the system to a newer version." },

    @{ Category = "UI Tweaks"; Description = "Remove Lock Screen"; Path = "HKLM:\\SOFTWARE\\Policies\\Microsoft\\Windows\\Personalization"; Name = "NoLockScreen"; Type = "DWORD"; Value = 1; Explanation = "Removes the lock screen on Windows login." },
    @{ Category = "UI Tweaks"; Description = "Disable Transparency Effects"; Path = "HKCU:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Themes\\Personalize"; Name = "EnableTransparency"; Type = "DWORD"; Value = 0; Explanation = "Disables the transparency effects in UI elements such as taskbars and start menus." },

    @{ Category = "Additional Tweaks"; Description = "Disable Edge Preloading"; Path = "HKCU:\\SOFTWARE\\Microsoft\\Edge\\Main"; Name = "PreloadHttpsURL"; Type = "DWORD"; Value = 0; Explanation = "Disables the automatic preloading of certain URLs in Microsoft Edge." }
)

# Function to Apply Selected Tweaks
function Apply-Tweaks {
    param (
        [array]$SelectedTweaks
    )
    foreach ($tweak in $SelectedTweaks) {
        Apply-Tweak -Path $tweak.Path -Name $tweak.Name -Type $tweak.Type -Value $tweak.Value
    }
}

# Function to Create and Display the UI
function Display-Menu {
    # Create the Form (window)
    $form = New-Object System.Windows.Forms.Form
    $form.Text = "Ksads Windows Tweaks"
    $form.Size = New-Object System.Drawing.Size(500, 600)
    $form.StartPosition = 'CenterScreen'
    $form.BackColor = [System.Drawing.Color]::FromArgb(33, 33, 33)  # Dark background

    # Create a Label for instructions
    $label = New-Object System.Windows.Forms.Label
    $label.Text = "Select Tweaks to Apply:"
    $label.ForeColor = [System.Drawing.Color]::White
    $label.Location = New-Object System.Drawing.Point(150, 20)
    $label.Size = New-Object System.Drawing.Size(200, 20)
    $form.Controls.Add($label)

    # Create checkboxes for the tweaks
    $checkboxes = @()
    $yPosition = 60
    $selectedTweaks = @()

    # Function to display tweaks in categories
    function Display-Tweaks ($categoryName, $tweaksToDisplay) {
        $categoryLabel = New-Object System.Windows.Forms.Label
        $categoryLabel.Text = $categoryName
        $categoryLabel.ForeColor = [System.Drawing.Color]::FromArgb(66, 135, 245)
        $categoryLabel.Location = New-Object System.Drawing.Point(50, $yPosition)
        $categoryLabel.Size = New-Object System.Drawing.Size(400, 20)
        $form.Controls.Add($categoryLabel)
        $yPosition += 20

        foreach ($tweak in $tweaksToDisplay) {
            $checkbox = New-Object System.Windows.Forms.CheckBox
            $checkbox.Text = "$($tweak.Description) - $($tweak.Explanation)"
            $checkbox.ForeColor = [System.Drawing.Color]::White
            $checkbox.BackColor = [System.Drawing.Color]::FromArgb(33, 33, 33)
            $checkbox.Location = New-Object System.Drawing.Point(50, $yPosition)
            $checkbox.Size = New-Object System.Drawing.Size(400, 40)
            $checkbox.Tag = $tweak
            $form.Controls.Add($checkbox)
            $checkboxes += $checkbox
            $yPosition += 40  # Adjust position for the next checkbox
        }
    }

    # Display Tweaks Categorized
    $privacyTweaks = $tweaks | Where-Object { $_.Category -eq "Privacy Tweaks" }
    $cortanaTweaks = $tweaks | Where-Object { $_.Category -eq "Cortana & Search" }
    $systemTweaks = $tweaks | Where-Object { $_.Category -eq "System Tweaks" }
    $uiTweaks = $tweaks | Where-Object { $_.Category -eq "UI Tweaks" }
    $additionalTweaks = $tweaks | Where-Object { $_.Category -eq "Additional Tweaks" }

    Display-Tweaks -categoryName "Privacy Tweaks" -tweaksToDisplay $privacyTweaks
    Display-Tweaks -categoryName "Cortana & Search" -tweaksToDisplay $cortanaTweaks
    Display-Tweaks -categoryName "System Tweaks" -tweaksToDisplay $systemTweaks
    Display-Tweaks -categoryName "UI Tweaks" -tweaksToDisplay $uiTweaks
    Display-Tweaks -categoryName "Additional Tweaks" -tweaksToDisplay $additionalTweaks

    # Show the form
    $form.ShowDialog()
}

# Run the Display-Menu function
Display-Menu
